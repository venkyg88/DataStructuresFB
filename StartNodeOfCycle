/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        
        ListNode node = cyclePresent(head);
        if (node == null){
            return null;
        } else {
            while (node != head) {
                node = node.next;
                head = head.next;
            } 
        }
        return head;
    }
    
    
    public ListNode cyclePresent(ListNode head) {
        if (head == null || head.next == null) return null;
        ListNode s = head, f = head;
        
        while(f != null && f.next != null) {
            s = s.next;
            f = f.next.next;
            if ( s == f) {
                return s;
            }
        }
        return null;
    }
}
