/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class SolutionTrees {

    /*Maximum Depth of Binary Tree */
     public int maxDepth(TreeNode root) {
        if (root == null) return 0;
        
        return Math.max(maxDepth(root.left),maxDepth(root.right)) + 1;
         
    }
    
    /** Invert Binary Tree **/
    public TreeNode invertTree(TreeNode root) {
        if( root == null) return null;
        
        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;
        invertTree(root.left);
        invertTree(root.right);
        
        return root;
    }
    
    /** Given two binary trees, write a function to check if they are equal or not. 
    Two binary trees are considered equal if they are structurally identical and the nodes have the same value. **/
    
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if( p == null && q == null) return true;
        if(p == null || q == null) return false;
        
        if ( p.val == q.val) {
            return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
        }
        
        return  false;
    }
    
    
}
